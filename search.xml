<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DaoVoice实现在线联系]]></title>
    <url>%2F2019%2F04%2F06%2FDaoVoice%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[绝佳的用户沟通工具 注册登录DaoVoice注册登录地址如下:http://www.daovoice.io/官网进行注册,需要邀请码: b6dbddb6 复制粘贴就可以了~!或者通过下面链接进入：http://dashboard.daovoice.io/get-started?invite_code=b6dbddb6 复制粘贴代码修改的hexo的文件路劲如下: themes/next/layout/_partials/head.swig 添加下面的代码: 12345678&#123;% if theme.daovoice %&#125; &lt;script&gt;(function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/b6dbddb6.js","daovoice") daovoice('init', &#123; app_id: "你获取的appid"&#125;);daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; 这段代码从这里找： 根据你自己的进行修改，参照下图： 修改主题的配置文件在主题的配置文件中添加: 12daovoice: truedaovoice_app_id: 我们注册获取的id 重新部署输入hexo s部署之后发现DaoVoice官网会提示 同时网页右下角出现了DaoVoice的图标 测试输入hello wugenqiang 回车键发送，效果如图： 与此同时，DaoVoice后台也同样收到了信息 如果每次都要登录DaoVoice进行回复有些麻烦，所以建议在DaoVocie内绑定微信，然后使用DaoVoice的小程序进行手机上的回复操作就很方便了。 绑定微信的途径：]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>DaoVoice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo之修改内容区域的宽度]]></title>
    <url>%2F2019%2F04%2F06%2FHexo%E4%B9%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%AE%BD%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[修改内容区域的宽度编辑主题的 source/css/_variables/custom.styl 文件，新增变量： 12345// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 1050px]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo的NexT主题打赏功能]]></title>
    <url>%2F2019%2F04%2F06%2FHexo%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[准备支付宝和微信二维码首先要生成支付宝和微信收钱二维码 在_config.yml中配置图片wechat.jpg、alipay.jpg图片放入themes/next/source/images中 123456reward: enable: true #打赏功能 comment: 原创技术分享，您的支持将鼓励我继续创作 wechatpay: /images/wechat.jpg alipay: /images/alipay.jpg 到目前为止，已经实现了需要的功能，如图所示： 但是出现闪动Bug，所以进行下面的修复 修复闪动Bug修改next/source/css/_common/components/post/post-reward.styl，注释掉下面部分即可 123456/*注释此部分#QR &gt; div:hover p &#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125;*/ 好啦，到这里大功告成，完美~~]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Coding+Github双服务器托管Hexo]]></title>
    <url>%2F2019%2F04%2F05%2FCoding-Github%E5%8F%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%98%E7%AE%A1Hexo%2F</url>
    <content type="text"><![CDATA[写在前面其实之前是用的wordpress在阿里云上挂着。觉得Hexo好像更符合现在我的审美，so, do it! 所以我选择了Hexo 部署优化Hexo这一步我之前写过，在这里我就不详细赘述了啊 Hexo+NexT拥抱舒爽 创建Github公开库 Hexo博客上传至Github 创建Coding公开库创建腾讯云开发者平台（或Coding）公开库，因为目前两家公司战略合作，现在共用了。https://dev.tencent.com/ 创建项目项目地址格式是 username.coding.me，格式不对会404哦，项目名称随便，确定就ok例如我的： 开启page服务创建完记得进入代码浏览，看看是否正确生成，然后进入page服务，然后开启开启成功效果图： 配置服务并将文件部署到Github修改_config.yml修改Hexo根目录下 _config.yml 文件，找到最下面的 deploy，格式类似我这样的 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git #repository: https://github.com/wugenqiang/wugenqiang.github.io.git #复制过来 #branch: master repo: github: https://github.com/wugenqiang/wugenqiang.github.io.git,master coding: https://dev.tencent.com/u/wugenqiang/p/wugenqiang.coding.me.git,master 生成静态文件发布执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 清除缓存，生成静态文件，本地发布页面上没问题的话，就可以执行hexo d 会弹出输入github账号密码，和腾讯开发者平台的账号密码。后面通过生成ssh私钥，公钥就不用频繁输入用户名密码 部署成功，按照各自平台的pages服务提示的网址即可访问在这里我就演示coding的吧，嘿嘿 预览地址 http://wugenqiang.coding.me/ https://wugenqiang.github.io/ 设置自定义域名对于Github来说，可参考： Hexo博客绑定个人域名 对于Coding来说，来进行下面步骤：1.进入项目，进入Page服务页 点击设置进入 2.设置域名指向设置自定义域名指向wugenqiang.coding.me ok 加快访问速度修改解析记录，点击 修改，然后将github解析线路改成海外，然后保存，这样国外的用户访问你的博客的话会跳转到你的github的页面。国内默认coding.me，加快访问速度，欧耶 来访问试试吧，嘿嘿嘿 死命点我吧，亲]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客自定义域名开启HTTPS]]></title>
    <url>%2F2019%2F04%2F05%2FHexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%BC%80%E5%90%AFHTTPS%2F</url>
    <content type="text"><![CDATA[GitHub官方曾经宣布，GitHub Pages的自定义域名获得对HTTPS的支持。 自己博客没有启用HTTPS，看到消息后，就想着折腾下吧。其实，很简单的，对着官方教程一步步来就可以了。 首先，打开仓库的Settings，找到GitHub Pages项，有一个Enforce HTTPS，在前面的框打上钩就可以了。完成后，博客就全站支持HTTPS了。 效果如下： 但是爆红就让人心态不好了，所以下面使用Netlify来优化https方案 Netlify (推荐) 可以使用 CLI 上传代码 支持自定义域名且自定义域名支持一键开启 https（证书来自 Let’s Encrype） 支持强制让用户通过 https 访问网站（开启后此功能后，http 的访问一律会 301 跳转到 https 支持自动构建 支持重定向（Redirects）和重写（Rewrites）功能 数据通过 HTTP2 协议传输 提供 webhooks 与 API NetlifyNetlify是一家专注于提供静态网站托管服务的公司，通过自己的内容分发网络，将提前建立好的静态页面呈献给访客，节约了加载的时间。 部署网站首先去 Netlify 注册账号登录（https://www.netlify.com/） 接着点击页面右上角的 New site from Git 这里选择的 GitHub ,别忘记勾选访问公共仓库选项.之后授权给 Netlify 指定Repository,然后 Deploy 设置自定义域名点击 Domain settings 然后点击 Add custom domain. 然后到域名解析处,修改域名CNAME记录,记录值就是设置完域名页面显示的配置值 添加SSL证书设置完成域名绑定后,设置中心选项有所变化 , 点击 至此配置完成 效果显示： 完美~~]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>域名</tag>
        <tag>Https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客绑定个人域名]]></title>
    <url>%2F2019%2F04%2F04%2FHexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[前段时间用hexo搭建的gitpage个人博客，域名默认也是 github 下的二级域名：username.github.io,现在为了提升格调准备将自己的博客指向一个新的域名。 下面来记录下过程。 购买域名如果想要免费的域名，可以到下面网址购买：http://www.dot.tk/en/index.html?lang=en当然，如果有条件，最好到阿里云或者腾讯云等地方购买域名，听说1元优惠域名还是很多的 域名解析首先获取自己 github 的二级域名的 IP地址，windows 下直接在 cmd 里 Ping 一下自己的博客就会得到 IP 地址： 我的ip是185.199.111.153下面通过 DNS域名解析将购买的域名指向 github 的二级域名：username.github.io，我的是在腾讯云购买的1元用一年的，进入腾讯云的管理控制台-域名与网站-云解析 DNS，进入域名的解析设置，点击新手指导，将得到的 IP 地址填到记录值一栏，点击确定就 OK 了。填完以后的解析列表会出现： 记录值就是自己 github 的二级域名的 IP地址。 设置CNAME在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：blog.enjoytoshare.club 在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如： 好了，新域名配置完成，可以访问了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[英语知识整理]]></title>
    <url>%2F2019%2F04%2F02%2F%E8%8B%B1%E8%AF%AD%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[222]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研英语</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>考研</tag>
        <tag>考研英语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[概率论与数理统计知识整理]]></title>
    <url>%2F2019%2F04%2F02%2F%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[111]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研数学</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>考研</tag>
        <tag>考研数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性代数知识整理]]></title>
    <url>%2F2019%2F04%2F02%2F%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[111]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研数学</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>考研</tag>
        <tag>考研数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高等数学知识整理]]></title>
    <url>%2F2019%2F04%2F02%2F%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[111]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研数学</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>考研</tag>
        <tag>考研数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近现代史知识整理]]></title>
    <url>%2F2019%2F04%2F02%2F%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[hello]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研政治</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>考研</tag>
        <tag>考研政治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT拥抱舒爽]]></title>
    <url>%2F2019%2F04%2F01%2FHexo-NexT%E6%8B%A5%E6%8A%B1%E8%88%92%E7%88%BD%2F</url>
    <content type="text"><![CDATA[写在前面本文主要是Hexo+NexT主题的配置以及页面的样式优化 本篇文档参考了许多大佬的文章以及配置文件，在此感谢大佬们。 本文参考的文章都会直接给出原文链接或者以注脚的形式标记出处，如有遗漏，欢迎指出。 本文内容会在后续的优化中慢慢补充完整~~ 首先在配置Hexo+NexT之前，最好阅读一下Hexo官方文档和NexT使用文档 安装和配置参考博客： Windows下部署安装Hexo 创建Hexo项目 Hexo博客上传至Github 使用NexT主题优化Hexo博客 页面优化修改文章底部#为图标修改模板/themes/next/layout/_macro/post.swig， 搜索 rel=”tag”&gt;#，将 # 换成 效果如下图所示： 点击出现爱心效果在/themes/next/source/js/love.js下新建文件love.js，接着把该链接下的代码拷贝粘贴到love.js文件中 1!function (e, t, a) &#123; function n() &#123; c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++)d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y-- , d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &quot;left:&quot; + d[e].x + &quot;px;top:&quot; + d[e].y + &quot;px;opacity:&quot; + d[e].alpha + &quot;;transform:scale(&quot; + d[e].scale + &quot;,&quot; + d[e].scale + &quot;) rotate(45deg);background:&quot; + d[e].color + &quot;;z-index:99999&quot;); requestAnimationFrame(r) &#125; function o() &#123; var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement(&quot;div&quot;); a.className = &quot;heart&quot;, d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement(&quot;style&quot;); a.type = &quot;text/css&quot;; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a) &#125; function s() &#123; return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot; &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n() &#125;(window, document); 在\themes\next\layout_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 效果如下图所示： 文章加密访问打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head-unique.swig文件,插入这样一段代码: 12345678910&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入查看密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码不正确,请询问主编大大！&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章上写成类似这样: 12345678910title: Hexo+NexT拥抱舒爽tags: - Hexo - NexTcategories: - Hexoauthor: WuGenQiangpassword: 123456date: 2019-03-31 19:01:35updated: 2019-03-31 19:01:35 效果如图所示： 优化深色代码高亮背景在主题配置文件修改代码高亮背景为深色背景后，当在博客文章上选择代码时，选择到的颜色也为深色，虽然和背景色还是有点点区别，但是不好区分。所以经过一番研究，才有了以下优化教程。 在myblog/themes/next/source/css/_custom/custom.styl中添加以下样式代码： 123456789101112131415//page code background-color.code ::selection &#123; background: #2593a6; color: #fff;&#125;//gitalk code background-color .gt-container .gt-comment-content .highlight pre, .markdown-body pre&#123; background-color: #2d2d2d;&#125;.gt-container .gt-comment-content .highlight ::selection &#123; background: #2593a6; color: #fff;&#125; 以上代码优化了所以高亮代码区域，包括gitalk评论区的高亮代码。 这些样式代码是通过浏览器调试而得，如有其它样式的需求，可参考本示例在浏览器中调试。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PicGo+GitHub图床，让Markdown飞起]]></title>
    <url>%2F2019%2F04%2F01%2FPicGo-GitHub%E5%9B%BE%E5%BA%8A%EF%BC%8C%E8%AE%A9Markdown%E9%A3%9E%E8%B5%B7%2F</url>
    <content type="text"><![CDATA[PicGo+GitHub图床，让Markdown飞起 PicGo介绍这是一款图片上传的工具，目前支持微博图床，七牛图床，腾讯云，又拍云，GitHub等图床，未来将支持更多图床。 所以解决问题的思路就是，将本地的文件，或者剪切板上面的截图发送图床，然后生成在线图片的链接，这样就可以 让Markdown文档飞起来了，走到哪就可以用到哪~~ 在众多的图床中，我选择的GitHub图床，其它类型的图床如果你们有兴趣的话可以试一下，主要我对于Github有特殊的感 情，很难割舍~~ 下载PicGo进入下载链接下载链接为：https://github.com/Molunerfinn/PicGo/releases/tag/v2.0.5 选择安装包下载 安装软件包 创建GitHub图床需要注册/登陆GitHub账号 已经有了自行跳过这一步 申请GitHub账号很简单，我就不演示了 创建Repository随便命名，我的比较简单，直接是picGo 生成Token生成一个Token用于操作GitHub repository Settings -&gt; Developer settings -&gt; Personal access tokens 然后确定提交，复制生成一串字符 token，这个 token 只出现一次，所以要保存一下。 配置PicGo客户端如下图配置： 说明： 仓库名 即你的仓库名 分支名 默认 master Token 就是刚刚复制的那一串字符 存储路径 这个可以填也可以不填，填了的话图片就上传到这个文件夹 域名 这个要改一下 格式： https://raw.githubusercontent.com/[仓库名]/master 然后点确定就OK了，不妨试试。 小结一下PicGo是一个不错的软件，真的很好使用，虽然我只用了两天，但是我爱不释手，我之前自己写过图床，但是需要有自己的 云服务器才可访问，所以我自己上网查资料，找到了这个好用的图床工具。 上面的步骤都设置好之后，就可以让自己的Markdown文档飞起来了，来试试吧~~]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown功能点讲解]]></title>
    <url>%2F2019%2F03%2F31%2FMarkdown%E5%8A%9F%E8%83%BD%E7%82%B9%E8%AE%B2%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[提起Markdown，对我来说是毕设、是项目、是不可多得的助手。 基础语法标题Markdown支持6种级别的标题，对应html标签 h1 ~ h6 123456# h1## h2### h3#### h4##### h5###### h6 段落及区块引用Markdown提供了一个特殊符号 &gt; 用于段首进行强调，被强调的文字部分将会高亮显示 1&gt; 这段文字将会被高亮显示... 以上标记显示效果如下： 插入链接或图片Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记 12[点击跳转至百度](http://www.baidu.com)![图片](https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 以上标记显示效果如下： 点击跳转至百度 注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。 列表Markdown支持有序列表和无序列表两种形式： 无序列表使用 * 或 + 或 - 标识 有序列表使用数字加 . 标识，例如：1. 分隔线有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以 12***--- 以上标记显示效果如下： 强调有时候，我们对某一部分文字进行强调，使用 * 或 _ 包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗 12345*这里是斜体*_这里是斜体_**这里是加粗**__这里是加粗__ 这里是斜体这里是斜体 这里是加粗这里是加粗 高级用法插入代码块Markdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。 方法是，使用反引号 ` 进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹 这是一段var x = 3行内代码 如果插入一整段代码，需要至少使用两个以上反引号进行包裹， 看效果： 123fun (x: Int, y: Int): Int &#123; return x + y&#125; 注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。 插入表格表格是Markdown语法中比较复杂的一个，其语法如下： 123表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二 以上标记显示效果如下： 表头 条目一 条目二 项目 项目一 项目二 注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。 特殊符号处理Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理： 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\ =&gt; \ 。 注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。 文本居中引用123456&#123;% cq %&#125;人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！&#123;% endcq %&#125; 效果如下图所示： 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ 主题自带样式 note 标签1&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt; 效果如下： default 1&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt; 效果如下： primary 1&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt; 效果如下： success 1&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt; 效果如下： warning 1&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt; 效果如下： danger 在 主题配置文件 中需要配置下: 123456789# Note tag (bs-callout).note: # 风格 style: flat # 要不要图标 icons: true # 圆角矩形 border_radius: 3 light_bg_offset: 0]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法与数据结构知识整理]]></title>
    <url>%2F2019%2F03%2F31%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[第一章 绪论本章重点： - 数据结构的基本概念 - 算法与算法设计的要求 计算机解决问题的一般步骤：建立数学模型 =&gt; 设计算法 =&gt; 编写程序 =&gt; 测试、调整程序来解决问题 数学模型： 数值问题（数学方程） 非数值问题（集合、线性表、树、图等） 数据结构：是一门研究非数值计算的程序设计问题中计算机的操作对象以及它们之间的关系和操作等等的学科。 基本概念和术语数据（Data） 客观事务的符号表示 所有能够输入到计算机中并被计算机程序处理的符号的总称 信息在计算机中的表现形式 图像、声音、符号等等 数据元素（Data Element） 数据的基本单位，计算机中通常作为一个整体来考虑，如一棵树中的一个结点、一个图中的一个结点。 一个数据元素可以有若干个数据项（Data Item）组成。 数据对象（Data Object） 性质相同的数据元素的集合。 数据结构的定义数据结构：相互之间存在一种或多种关系的数据元素的集合。 数据元素之间的关系——结构 四种基本结构：（1）集合（2）线性结构（3）树形结构（4）图状结构/网状结构]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研计算机专业课</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络知识整理]]></title>
    <url>%2F2019%2F03%2F31%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[写在前面 第一章 计算机网络概述网络和计算机网络的区分 网络包含着计算机网络 电话网、铁路网、人体内神经系统网络、消化系统网络等亦属于网络的范畴 计算机网络的概念计算机网络：是一个将分散的、具有独立功能的计算机系统， 通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。 计算机网络是互连的、自治的计算机集合。 互连 —— 互联互通、通信链路自治 —— 无主从关系 计算机网络的功能前两个功能最常考： （1）数据通信（连通性） （2）资源共享（包括三类共享：硬件、软件和数据共享） （3）分布式处理（多台计算机各自承担同一工作任务的不同部分，例如Hadoop平台） （4）提高可靠性（替代机替代） （5）负载均衡（各计算机之间更加亲密） 计算机网络的组成按组成部分来分 （1）硬件 （2）软件 （3）协议 按工作方式来分 （1）边缘部分：用户可以直接使用，包括两种：（1）C/S方式（2）P2P方式 （2）核心部分：为边缘部分服务 按功能组成来分 （1）通信子网：实现数据通信 （2）资源子网：实现资源共享/数据处理 计算机网络的分类按分布范围来分 （1）广域网WAN （2）城域网MAN （3）局域网LAN （4）个人区域网PAN 通常，广域网WAN使用的是交换技术，局域网LAN使用的是广播技术 按使用者来分 （1）公用网 （2）专用网 按交换技术来分 （1）电路交换 （2）报文交换 （3）分组交换 按拓扑结构来分 目前我们使用的最大的因特网就属于网状型拓扑结构 按传输技术来分 （1）广播式网络：共享公共通信信道 （2）点对点网络：使用分组存储转发和路由选择机制 脑图时刻，记忆一下：]]></content>
      <categories>
        <category>课程复习整理</category>
        <category>考研</category>
        <category>考研计算机专业课</category>
      </categories>
      <tags>
        <tag>课程复习整理</tag>
        <tag>考研</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT 加入背景图片]]></title>
    <url>%2F2019%2F03%2F31%2FHexo-Next-%E5%8A%A0%E5%85%A5%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BDgitalk-1%2F</url>
    <content type="text"><![CDATA[添加如下代码：给 hexo next 加上背景图片，只需要在 themes\next\source\css \ _custom\custom.styl 文件中 添加几行代码： 12345678910111213@media screen and (min-width:1200px) &#123; body &#123; background-image:url(/images/background.jpg); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; &#125; #footer a &#123; color:#eee; &#125;&#125; ok]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT 加入评论功能gitalk]]></title>
    <url>%2F2019%2F03%2F31%2FHexo-Next-%E5%8A%A0%E5%85%A5%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BDgitalk%2F</url>
    <content type="text"><![CDATA[Gitalk: 一个基于 Github Issue 和 Preact 开发的评论插件 详情Demo可见:https://gitalk.github.io/ 增加评论区 注册OAuth Application 在GitHub上注册新应用, 链接:https://github.com/settings/applications/new 参数 说明 Application name 应用名称, 可以任意填入 Homepage URL 网站URL, 注意用https://开头, 开头如https://vonsdite.cn Application description 应用描述, 可以任意填入 Authorization callback URL 网站URL, 注意用https://开头, 如https://vonsdite.cn 注册后记下Client ID和Client Secret, 后续要使用到 md5.min.js在themes\next\source\js\src\目录下创建md5.min.js, 并添加如下内容: 加这个代码的原因是: 部分文章的评论区会报Error: Validation Failed, 具体原因是由于 Github 限制labels长度不能超过50 引起的, 该问题解决方案来自Gitalk项目仓Issues 115, 通过MD5加密ID来缩短labels长度。 1!function(n)&#123;&quot;use strict&quot;;function t(n,t)&#123;var r=(65535&amp;n)+(65535&amp;t);return(n&gt;&gt;16)+(t&gt;&gt;16)+(r&gt;&gt;16)&lt;&lt;16|65535&amp;r&#125;function r(n,t)&#123;return n&lt;&lt;t|n&gt;&gt;&gt;32-t&#125;function e(n,e,o,u,c,f)&#123;return t(r(t(t(e,n),t(u,f)),c),o)&#125;function o(n,t,r,o,u,c,f)&#123;return e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;function u(n,t,r,o,u,c,f)&#123;return e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;function c(n,t,r,o,u,c,f)&#123;return e(t^r^o,n,t,u,c,f)&#125;function f(n,t,r,o,u,c,f)&#123;return e(r^(t|~o),n,t,u,c,f)&#125;function i(n,r)&#123;n[r&gt;&gt;5]|=128&lt;&lt;r%32,n[14+(r+64&gt;&gt;&gt;9&lt;&lt;4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e&lt;n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]&#125;function a(n)&#123;var t,r=&quot;&quot;,e=32*n.length;for(t=0;t&lt;e;t+=8)r+=String.fromCharCode(n[t&gt;&gt;5]&gt;&gt;&gt;t%32&amp;255);return r&#125;function d(n)&#123;var t,r=[];for(r[(n.length&gt;&gt;2)-1]=void 0,t=0;t&lt;r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t&lt;e;t+=8)r[t&gt;&gt;5]|=(255&amp;n.charCodeAt(t/8))&lt;&lt;t%32;return r&#125;function h(n)&#123;return a(i(d(n),8*n.length))&#125;function l(n,t)&#123;var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length&gt;16&amp;&amp;(o=i(o,8*n.length)),r=0;r&lt;16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))&#125;function g(n)&#123;var t,r,e=&quot;&quot;;for(r=0;r&lt;n.length;r+=1)t=n.charCodeAt(r),e+=&quot;0123456789abcdef&quot;.charAt(t&gt;&gt;&gt;4&amp;15)+&quot;0123456789abcdef&quot;.charAt(15&amp;t);return e&#125;function v(n)&#123;return unescape(encodeURIComponent(n))&#125;function m(n)&#123;return h(v(n))&#125;function p(n)&#123;return g(m(n))&#125;function s(n,t)&#123;return l(v(n),v(t))&#125;function C(n,t)&#123;return g(s(n,t))&#125;function A(n,t,r)&#123;return t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd?define(function()&#123;return A&#125;):&quot;object&quot;==typeof module&amp;&amp;module.exports?module.exports=A:n.md5=A&#125;(this); 修改主题配置文件_config.yml 在主题配置文件themes/next/_config.yml中添加如下内容: 123456789101112gitalk: enable: true github_id: # Github repo owner repo: # Repository name to store issues client_id: # Github Application Client ID client_secret: # Github Application Client Secret admin_user: # GitHub repo owner and collaborators, only these guys can initialize github issues distraction_free_mode: true # Facebook-like distraction free mode # Gitalk&apos;s display language depends on user&apos;s browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available value: en, es-ES, fr, ru, zh-CN, zh-TW language: 以上就是Next中添加gitalk评论的配置。 博客上传到GitHub上后, 打开页面进入某一篇文章 就可以看到： 如果上述配置均无误, 点击使用GitHub登录就会建立一个评论区(实际上是在你的Github博客仓库下开了一个Issue)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo获取网易云音乐外链]]></title>
    <url>%2F2019%2F03%2F17%2FHexo%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE%2F</url>
    <content type="text"><![CDATA[Hexo获取网易云音乐外链网易云音乐MP3外链真实地址获取方法，可用于各种背景音乐、直链播放… 一、进入网易云音乐官网打开网易云音乐，找到喜欢的歌，复制网址的ID， 例如： 地址为：https://music.163.com/#/song?id=350909 id就是350909 那么，这首歌的MP3外链地址就是：https://music.163.com/song/media/outer/url?id=350909.mp3 是不是很简单呢，咱们来播放一下 二、放入Hexo中播放使用下面的格式，插在你希望的地方就可以啦： 1&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/song/media/outer/url?id=350909.mp3&quot;&gt;&lt;/iframe&gt; 可以自己到我的技术博客那个音乐吧浏览，底部哦 这是地址，比小心心~~ 我是地址点我点我哟 其实这个还有一个好处就是可以下载，唯一的小缺憾就是不美观耶，不过耳朵舒服呢]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题开启文章目录和调整样式]]></title>
    <url>%2F2019%2F03%2F17%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E5%BC%80%E5%90%AF%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E8%B0%83%E6%95%B4%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[一、前言Hexo博客NexT主题中是有目录的，只是在默认情况下没有开启，需要我们来手动开启。 二、修改样式文件custom.styl文章目录样式文件custom.styl文件位于themes/next/source/css/_custom 打开后添加内容： 1.文章目录默认展开12//文章目录默认展开.post-toc .nav .nav-child &#123; display: block; &#125; 2.文章目录字体大小调整123.post-toc ol &#123; font-size : 13px; &#125; 三、修改主题配置文件主题配置文件位于themes/next/_config.yml 每行目录超长自动换行 123toc: enable: true wrap: true 四、结果图展示]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springboot实现小程序端发送邮箱验证码功能]]></title>
    <url>%2F2019%2F03%2F16%2FSpringboot%E5%AE%9E%E7%8E%B0%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Springboot实现小程序端的邮箱验证一、配置项 配置pom文件，引入发送邮件的依赖 在pom文件中添加： 12345&lt;!--邮件发送核心包--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 修改配置文件application.yml，这里以QQ邮箱为例 我这里使用的是yml方式，当然也可以采用properties方式来写 1234567891011121314#邮件发送配置spring: mail: default-encoding: UTF-8 host: smtp.qq.com username: 你的邮箱 password: 邮箱授权码 properties: mail: smtp: auth: true starttls: enable: true required: true 邮箱授权码可以按以下方法获取: 打开QQ邮箱网页→设置→账户→POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务→开启POP3/SMTP服务，然后就能看到授权码了 二、编写mailService和mailServiceImpl即邮件服务层和邮件服务接口实现层 ${spring.mail.username}是在yml中配置的属性，这里有一个方法，第一个是发送普通邮件，第二个是发送带有附件的邮件 邮件服务层（IMailService） 12345678public interface IMailService &#123; //发送普通邮件 void sendSimpleMail(String to,String title,String content); //发送带有附件的邮件 void sendAttachmentsMail(String to, String title, String content, List&lt;File&gt; fileList);&#125; 邮件服务接口实现层（MailServiceImpl） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849@Servicepublic class MailServiceImpl implements IMailService &#123; @Value(&quot;$&#123;spring.mail.username&#125;&quot;) private String from; @Resource private JavaMailSender mailSender; Logger logger = LoggerFactory.getLogger(this.getClass()); //发送普通邮件 @Override public void sendSimpleMail(String to, String title, String content) &#123; SimpleMailMessage message = new SimpleMailMessage(); message.setFrom(from); message.setTo(to); message.setSubject(title); message.setText(content); mailSender.send(message); logger.info(&quot;邮件发送成功&quot;); &#125; //发送带有附件的邮件 @Override public void sendAttachmentsMail(String to, String title, String content, List&lt;File&gt; fileList) &#123; MimeMessage message = mailSender.createMimeMessage(); try &#123; MimeMessageHelper helper = new MimeMessageHelper(message,true); helper.setFrom(from); helper.setTo(to); helper.setSubject(title); helper.setText(content); String fileName = null; for (File file:fileList) &#123; fileName = MimeUtility.encodeText(file.getName(), &quot;GB2312&quot;, &quot;B&quot;); helper.addAttachment(fileName, file); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; mailSender.send(message); logger.info(&quot;邮件发送成功&quot;); &#125;&#125; 三、编写controller即邮件发送控制层 12345678910111213141516171819//获取邮箱验证的验证码 @RequestMapping(&quot;/getCheckCode&quot;) public JsonResult getCheckCode(HttpServletRequest request) &#123; //获取微信小程序get的参数值并打印 String userEmail = request.getParameter(&quot;userEmail&quot;); user = userService.queryUserByUserEmail(userEmail); if (null == user) &#123; return new JsonResult(JsonResponseStatus.EMPTY.getCode(), JsonResponseStatus.EMPTY.getMsg()); &#125;else&#123; String checkCode = String.valueOf(new Random().nextInt(899999) + 100000); String message = &quot;您的注册验证码为：&quot;+checkCode; try &#123; mailService.sendSimpleMail(userEmail, &quot;注册验证码&quot;, message); &#125;catch (Exception e)&#123; return new JsonResult(JsonResponseStatus.EMPTY.getCode(), JsonResponseStatus.EMPTY.getMsg()); &#125; return new JsonResult(JsonResponseStatus.SUCCESS.getCode(), JsonResponseStatus.SUCCESS.getMsg(),checkCode); &#125; &#125; 附Web网页上可以用的控制层代码： 12345678910111213141516171819@Controllerpublic class MailController &#123; @Resource private IMailService mailService; @RequestMapping(&quot;getCheckCode&quot;) @ResponseBody public String getCheckCode(String email)&#123; String checkCode = String.valueOf(new Random().nextInt(899999) + 100000); String message = &quot;您的注册验证码为：&quot;+checkCode; try &#123; mailService.sendSimpleMail(email, &quot;注册验证码&quot;, message); &#125;catch (Exception e)&#123; return &quot;&quot;; &#125; return checkCode; &#125;&#125; 四、编写小程序邮箱验证页面12345678910111213141516171819202122232425&lt;!--pages/getCheckCode/getCheckCode.wxml--&gt;&lt;form bindsubmit=&quot;getCheckCode&quot;&gt; &lt;view class=&quot;form-list&quot;&gt; &lt;view class=&quot;form-item&quot;&gt; &lt;view class=&quot;form-item-hd&quot;&gt;邮箱&lt;/view&gt; &lt;view class=&quot;form-item-bd&quot;&gt; &lt;input type=&quot;email&quot; name=&quot;userEmail&quot; value=&quot;&#123;&#123;userEmail&#125;&#125;&quot; placeholder=&quot;请输入邮箱&quot; maxlength=&quot;25&quot; /&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;!--按钮--&gt; &lt;button formType=&quot;submit&quot; class=&quot;edit-btn&quot;&gt;获取验证码&lt;/button&gt;&lt;/form&gt;&lt;form bindsubmit=&quot;toPasswordReset&quot;&gt; &lt;view class=&quot;form-list&quot;&gt; &lt;view class=&quot;form-item&quot;&gt; &lt;view class=&quot;form-item-hd&quot;&gt;验证码&lt;/view&gt; &lt;view class=&quot;form-item-bd&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;checkCode&quot; value=&quot;&#123;&#123;checkCode&#125;&#125;&quot; placeholder=&quot;请输入验证码&quot; maxlength=&quot;20&quot; /&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;button formType=&quot;submit&quot; class=&quot;edit-btn&quot;&gt;进行验证&lt;/button&gt;&lt;/form&gt; 五、测试 好了，就分享到这边了啊，有问题可以在下面留言…]]></content>
      <categories>
        <category>小程序</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>邮箱验证</tag>
        <tag>Springboot</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
